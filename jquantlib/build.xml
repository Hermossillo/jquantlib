<?xml version="1.0"?>

<!--
 Copyright (C) 2008 Richard Gomes

 This source code is release under the BSD License.
 
 This file is part of JQuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://jquantlib.org/

 JQuantLib is free software: you can redistribute it and/or modify it
 under the terms of the JQuantLib license.  You should have received a
 copy of the license along with this program; if not, please email
 <jquant-devel@lists.sourceforge.net>. The license is also available online at
 <http://www.jquantlib.org/index.php/LICENSE.TXT>.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the license for more details.
 
 JQuantLib is based on QuantLib. http://quantlib.org/
-->

<!--
**
** This Ant build file mimics in a certain way the lifecycle defined by Maven2.
**
** We dont aim to provide a full emulation of what Maven2 does, but a miminal set of
** actions which are probably helpful for those who prefer Ant instead of Maven.
**
** As result of this build file, you will obtain 2 jar files:
**   . a library .jar file, which is intended to be included by applications;
**   . a ubber .jar file, which contains all dependencies, enabling it to demonstrate
**     how JQuantLib works. When you run this .jar file, you will obtain some calculations
**     as a result of sample programs.
**
** This build file does not implement at the moment:
**     . checkout of source files;
**     . shrink/obfuscation;
**     . generation of javadocs and other kinds of documentation;
**     . deployment of finished .jar files.
**
** Notes:
**   . In order to build JQuantLib, please first checkout all sources from SVN.
**     This build file does not checks out sources from SVN at the moment.
**
** @author Richard Gomes
**
-->
	
<project name="jquantlib" default="package" basedir="."
	 xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:antcontrib="antlib:net.sf.antcontrib">
	
	<!-- TODO :: pending implementation
	     1. automatic svn checkout
	     2. Make integration-test work with JUnit
	     3. generate reports: findbugs, taglist, surefire, pmd, jdepend 
	     -->
	
	<target name="_module">
		<property name="project.organisation" value="JQuantLib.org"/>
		<property name="project.module"       value="jquantlib"/>
		<property name="project.branch"       value="trunk"/>
		
		<property name="project.groupId"      value="org.jquantlib" />
		<property name="project.artifactId"   value="jquantlib" />
		<property name="project.version"      value="0.1.2" />
		
		<property name="project.name"         value="JQuantLib" />
	    <property name="project.description"  value="JQuantLib is a free, open-source and comprehensive framework for quantitative finance." />
		<property name="project.url"          value="http://www.jquantlib.org/" />
		
		<property name="project.spec.title"   value="QuantLib" />
		<property name="project.spec.version" value="0.8.1" />
		<property name="project.spec.vendor"  value="QuantLib.org" />
		
		<property name="project.impl.title"   value="JQuantLib" />
		<property name="project.impl.version" value="${project.version}" />
		<property name="project.impl.vendor"  value="JQuantLib.org" />
	</target>
	
	
	<!-- options -->
	
	<target name="_options">
		<!-- components managed by hand -->
		<property name="download.tools"              value="(does not matter)"/> 
		<property name="options.ivy.version"         value="2.0.0"/>
		<property name="options.antcontrib.version"  value="1.0b3"/>
		<property name="options.svnkit.version"      value="1.2.1"/>
		<property name="options.proguard.version"    value="4.3"/>
		
		<property name="options.javac.compiler"      value="javac1.6" />
		<property name="options.javac.excludes.main" value=""/>
		<property name="options.javac.excludes.test" value=""/>
		
		<property name="options.javadoc.maxmemory"   value="512m"/>
		<property name="options.proguard.maxmemory"  value="512m"/>
		
		<!-- components managed by a dependency manager -->
		<property name="options.dependencies.resolver" value="ivy"/>
		<property name="options.findbugs.version"      value="1.3.2"/>
	</target>
	
	
	
	<!-- ======================================================= -->
	<!--                                                         -->
	<!-- Probably you will not need to touch anything below here -->
	<!--                                                         -->
	<!-- ======================================================= -->
	
	
	<!-- profiles -->
	
	<!-- mode -->
	<target name="_profile-mode-default" unless="mode">
		<property name="profile.app.mode"   value="debug" />
	</target>
	<target name="_profile-mode-specified" if="mode">
		<property name="profile.app.mode"   value="${mode}" />
	</target>
	<target name="_profile-mode" depends="_profile-mode-default,_profile-mode-specified"/>
	
	<!-- realm -->
	<target name="_profile-realm-default" unless="realm">
		<property name="profile.app.realm"   value="default" />
	</target>
	<target name="_profile-realm-specified" if="realm">
		<property name="profile.app.realm"   value="${realm}" />
	</target>
	<target name="_profile-realm" depends="_profile-realm-default,_profile-realm-specified"/>
	
	<!-- relax -->
	<target name="_profile-relax-default" unless="relax">
		<property name="profile.app.relax" value="false" />
	</target>
	<target name="_profile-relax-specified" if="relax">
		<property name="profile.app.relax" value="true" />
	</target>
	<target name="_profile-relax" depends="_profile-relax-default,_profile-relax-specified"/>
	
	<target name="_profile" depends="_profile-mode,_profile-realm,_profile-relax">
		<property name="profile.dummy.class"   value="org.jquantlib.examples.Dummy"/>
		<property name="profile.samples.class" value="org.jquantlib.examples.EquityOptions"/>
		
		<property name="profile.scm.svn.username" value=""/>
		<property name="profile.scm.svn.password" value=""/>
	</target>
	
	<!-- properties -->
	
	<target name="_properties-default">
		<property name="default.scm.project" value="jquantlib" />
		<property name="default.scm.branch"  value="trunk" />
	</target>
	
	<target name="_properties-organization">
		<property name="project.organization.name" value="JQuantLib.org" />
		<property name="project.organization.url"  value="http://www.jquantlib.org/" />
	</target>
	
	<target name="_properties-issueManagement">
		<property name="project.issueManagement.system" value="Mantis" />
		<property name="project.issueManagement.url"    value="http://bugs.jquantlib.org/" />
	</target>
	
	<target name="_properties-ciManagement">
		<property name="project.ciManagement.system" value="Continuum" />
		<property name="project.ciManagement.url"    value="http://www.jquantlib.org/continuum/" />
	</target>
	
	<target name="_properties-project-buildNumber">
		<property name="project.buildNumber.doCheck"  value="false" />
		<property name="project.buildNumber.doUpdate" value="false" />
	</target>
	
	<target name="_properties-project-scm">
		<property name="project.scm.url" value="http://jquant.svn.sourceforge.net/svnroot/${default.scm.project}/${default.scm.branch}" />
	</target>
	
	<target name="_properties-project-compile">
		<property name="project.compile.jdk"        value="1.6" />
		<property name="project.compile.fork"       value="true" />
		<property name="project.compile.meminitial" value="128m" />
		<property name="project.compile.maxmem"     value="512m" />
		<property name="project.compile.debug"      value="false" />
		<property name="project.compile.verbose"    value="false" />
		<property name="project.compile.lint"       value="-Xlint:unchecked -Xlint:deprecation" />
	</target>
	
	<target name="_properties-project-package">
		<property name="project.jar.index" value="false" />
	</target>
	
	<target name="_properties-project-assembly">
		<property name="project.assembly.manifest.classStart"  value="org.jquantlib.examples.EquityOptions" />
	</target>
	
	<target name="_properties-project-deploy">
		<property name="project.deploy.site.url"       value="http://www.jquantlib.org/maven2/sites/jquantlib/" />
		<property name="project.deploy.repository.url" value="http://www.jquantlib.org/maven2/repos/" />
	</target>
	
	<target name="_properties" depends="_properties-default,_properties-organization,_properties-issueManagement,_properties-ciManagement,_properties-project-buildNumber,_properties-project-scm,_properties-project-compile,_properties-project-package,_properties-project-assembly,_properties-project-deploy" />
	
	
	<!-- bootstrap tools -->
	
	<!-- ivy -->
	<target name="_tools-properties-ivy" depends="_options">
		<property name="ivy.jar.dir"      value="${user.home}/.ivy"/>
		<property name="ivy.jar.file"     value="${ivy.jar.dir}/ivy.jar"/>
		<property name="ivy.download.url" value="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${options.ivy.version}/ivy-${options.ivy.version}.jar"/>
	</target>
	
	<target name="_tools-download-ivy" depends="_tools-properties-ivy" if="download.tools">
		<echo message="installing ivy..."/>
		<mkdir dir="${ivy.jar.dir}"/>
		<get verbose="false" src="${ivy.download.url}" dest="${ivy.jar.file}" usetimestamp="true"/>
	</target>
	
	<target name="_tools-install-ivy" depends="_tools-download-ivy">
		<path id="ivy.lib.path">
			<fileset casesensitive="true" dir="${ivy.jar.dir}" includes="**/*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
	</target>
	
	<!-- antcontrib -->
	<target name="_tools-properties-antcontrib" depends="_options">
		<property name="antcontrib.jar.dir"      value="${user.home}/.antcontrib"/>
		<property name="antcontrib.jar.file"     value="${antcontrib.jar.dir}/antcontrib-${options.antcontrib.version}.jar"/>
		<property name="antcontrib.download.url" value="http://mirrors.ibiblio.org/pub/mirrors/maven2/ant-contrib/ant-contrib/${options.antcontrib.version}/ant-contrib-${options.antcontrib.version}.jar"/>
	</target>
	
	<target name="_tools-download-antcontrib" depends="_tools-properties-antcontrib" if="download.tools">
		<echo message="installing ant-contrib..."/>
		<mkdir dir="${antcontrib.jar.dir}"/>
		<get verbose="false" src="${antcontrib.download.url}" dest="${antcontrib.jar.file}" usetimestamp="true"/>
	</target>
	
	<target name="_tools-install-antcontrib" depends="_tools-download-antcontrib">
		<path id="antcontrib.lib.path">
			<fileset casesensitive="true" dir="${antcontrib.jar.dir}" includes="**/*.jar" />
		</path>
		<taskdef resource="net/sf/antcontrib/antlib.xml" uri="antlib:net.sf.antcontrib" classpathref="antcontrib.lib.path"/>
	</target>
	
	<!-- svnkit -->
	<target name="_tools-properties-svnkit" depends="_options">
		<property name="svnkit.jar.dir"      value="${user.home}/.svnkit"/>
		<property name="svnkit.jar.file"     value="${svnkit.jar.dir}/svnant.jar"/>
		<property name="svnkit.jar.zip"      value="${svnkit.jar.dir}/svnkit.zip"/>
		<property name="svnkit.download.url" value="http://subclipse.tigris.org/files/documents/906/43359/svnant-${options.svnkit.version}.zip"/>
	</target>
	
	<target name="_tools-download-svnkit" depends="_tools-properties-svnkit" if="download.tools">
		<echo message="installing svnkit..."/>
		<mkdir dir="${svnkit.jar.dir}"/>
		<get verbose="false" src="${svnkit.download.url}" dest="${svnkit.jar.zip}" usetimestamp="true"/>
	</target>
	
	<target name="_tools-install-svnkit" depends="_tools-download-svnkit">
		<unzip src="${svnkit.jar.zip}" dest="${svnkit.jar.dir}">
			<patternset includes="**/*.jar"/>
		</unzip>
		<path id="svnkit.lib.path" >
			<fileset casesensitive="true" dir="${svnkit.jar.dir}">
				<include name="**/*.jar"/>
			</fileset>
		</path>
		<taskdef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="svnkit.lib.path"/>
	</target>
	
	
	<!-- proguard -->
	<target name="_tools-properties-proguard" depends="_options">
		<property name="proguard.jar.dir"      value="${user.home}/.proguard"/>
		<property name="proguard.jar.file"     value="${proguard.jar.dir}/proguard.jar"/>
		<property name="proguard.download.url" value="http://mirrors.ibiblio.org/pub/mirrors/maven2/net/sf/proguard/proguard/${options.proguard.version}/proguard-${options.proguard.version}.jar"/>
	</target>
	
	<target name="_tools-download-proguard" depends="_tools-properties-proguard" if="download.tools">
		<echo message="installing proguard..."/>
		<mkdir dir="${proguard.jar.dir}"/>
		<get verbose="false" src="${proguard.download.url}" dest="${proguard.jar.file}" usetimestamp="true"/>
	</target>
	
	<target name="_tools-install-proguard" depends="_tools-download-proguard">
		<!-- We dont install a task definition because ProGuard ant task is not very convenient :( -->
		<!--
		    <path id="proguard.lib.path" >
			    <fileset casesensitive="true" dir="${proguard.jar.dir}">
				    <include name="**/*.jar"/>
			    </fileset>
		    </path>
		    <taskdef resource="proguard/ant/task.properties" classpathref="proguard.lib.path"/>
		    -->
	    </target>
	    
	    <target name="_tools-install" depends="_tools-install-ivy,_tools-install-antcontrib,_tools-install-svnkit,_tools-install-proguard"/>
	    
	    
	    <!-- bootstrap -->
	    
	    <target name="_bootstrap-environment" depends="_profile,_module,_options,_properties">
		    <property name="project.build.lib"           value="${basedir}/lib" />
		    <property name="project.build.target"        value="${basedir}/target" />
		    <property name="project.build.classes"       value="${project.build.target}/classes" />
		    <property name="project.build.work"          value="${project.build.target}/work" />
		    <property name="project.build.scripts"       value="${basedir}/scripts" />
		    <property name="project.build.proguard.conf" value="${basedir}/scripts/pyx4me/obfuscator_shrinker.pro" />
		    <property name="project.build.javadocs"      value="${project.build.target}/site/api" />
		    <property name="project.build.src.main.java" value="${basedir}/src/main/java" />
		    <property name="project.build.src.main.res"  value="${basedir}/src/main/resources" />
			<property name="project.build.src.test.java" value="${basedir}/src/test/java" />
			<property name="project.build.src.test.res"  value="${basedir}/src/test/resources" />
			
			<property name="project.scm.connection" value="${project.scm.connection}" />
			<property name="project.scm.developerConnection" value="${project.scm.developerConnection}" />
			<property name="project.scm.url" value="${project.scm.url}" />
			
			<property name="project.installation.base" value="${project.artifactId}_${project.version}"/>
			<property name="project.installation.home" value="${user.home}/installations/${profile.app.mode}_${project.groupId}_${project.installation.base}" />
		</target>
		
		<target name="_bootstrap-tools" depends="_tools-install"/>
		
		
		<!-- pre-clean -->
		
		<target name="pre-clean" depends="_bootstrap-environment" description="executes processes needed prior to the actual project cleaning">
		</target>
		
		
		<!-- clean -->
		
		<target name="clean" depends="pre-clean" description="remove all files generated by the previous build">
			<delete dir="${project.build.target}" />
		</target>
		
		
		<!-- post-clean -->
		
		<target name="post-clean" depends="clean" description="executes processes needed to finalize the project cleaning">
		</target>
		
		
		<!-- validate -->
		
		<target name="validate" depends="_bootstrap-tools" description="validate the project is correct and all necessary information is available">
		</target>
		
		
		<!-- initialize -->
		
		<target name="_initialize-scm-version" unless="default.app.fresh">
			<svn username="${profile.scm.svn.username}" password="${profile.scm.svn.password}">
				<wcVersion path="." processUnversioned="true" prefix="project.scm."/>
			</svn>
		</target>
		
		<target name="_initialize-scm-modified" depends="_initialize-scm-version" unless="default.app.fresh,relax">
			<echo>repository.url=${project.scm.repository.url}</echo>
			<echo>repository.path=${project.scm.repository.path}</echo>
			<echo>revision.max=${project.scm.revision.max}</echo>
			<echo>revision.max-with-flags=${project.scm.revision.max-with-flags}</echo>
			<echo>revision.range=${project.scm.revision.range}</echo>
			<echo>committed.max=${project.scm.committed.max}</echo>
			<echo>committed.max-with-flags=${project.scm.committed.max-with-flags}</echo>
			<echo>modified=${project.scm.modified}</echo>
		</target>
		
		<target name="_initialize-scm-checkout" if="default.app.fresh">
			<svn username="${profile.scm.svn.username}" password="${profile.scm.svn.password}">
				<checkout url="${project.scm.url}" destPath="."/>
			</svn>
		</target>
		
		<target name="_initialize-scm" depends="_initialize-scm-modified,_initialize-scm-checkout">
			<svn>
				<status path="." revisionProperty="buildNumber"/>
			</svn>
		</target>
		
		<target name="_initialize-show-info">
			<echo>java.version=${java.version}</echo>
			<echo>java.vm.version=${java.vm.version}</echo>
			<echo>java.home=${java.home}</echo>
			<echo>java.endorsed.dirs=${java.endorsed.dirs}</echo>
			<echo>java.ext.dirs=${java.ext.dirs}</echo>
			<echo>java.library.path=${java.library.path}</echo>
			<echo>java.runtime.version=${java.runtime.version}</echo>
			<echo>java.specification.version=${java.specification.version}</echo>
			
			<echo>os.name=${os.name}</echo>
			
			<echo>project.build.src.main.java=${project.build.src.main.java}</echo>
			<echo>project.build.lib=${project.build.lib}</echo>
			<echo>project.build.target=${project.build.target}</echo>
			<echo>project.build.classes=${project.build.classes}</echo>
			<echo>project.build.javadocs=${project.build.javadocs}</echo>
			<echo>project.build.src.main.java=${project.build.src.main.java}</echo>
			<echo>project.build.src.main.res=${project.build.src.main.res}</echo>
			<echo>project.build.src.test.java=${project.build.src.test.java}</echo>
			<echo>project.build.src.test.res=${project.build.src.test.res}</echo>
			
			<echo>profile.app.realm=${profile.app.realm}</echo>
			<echo>profile.app.mode=${profile.app.mode}</echo>
			<echo>profile.app.relax=${profile.app.relax}</echo>

			<echo>project.installation.base=${project.installation.base}</echo>
			<echo>project.installation.home=${project.installation.home}</echo>
		    </target>
		    
		    <target name="initialize" depends="validate,_bootstrap-environment,_initialize-show-info,_initialize-scm" description="initialize build state, e.g. set properties or create directories">
			    <echo>VERSION: ${project.version}-${buildNumber}</echo>
			    <mkdir dir="${project.build.classes}" />
		    </target>
		    
		    
		    <!-- dependencies -->
		    
		    
		    <target name="_dependencies-ivy-resolve">
			    <echo message="Dependency resolver: Ivy"/>
		    	<ivy:retrieve />
		    </target>
		    
		    <target name="_dependencies-ivy" if="options.dependencies.resolver">
			    <antcall target="_dependencies-ivy-resolve" />
		    </target>
		    
		    <target name="_dependencies-none" unless="options.dependencies.resolver">
			    <echo message="Dependency resolver: (none)"/>
		    </target>
		    
		    <target name="dependencies" depends="initialize,_initialize-scm,_dependencies-none,_dependencies-ivy" description="dependencies">
			    <fileset casesensitive="true" id="dependencies.fileset.id" dir="${project.build.lib}">
				    <include name="**/*.jar" />
			    </fileset>
			    <path id="classes.path.id">
				    <fileset refid="dependencies.fileset.id"/>
				    <pathelement path="${project.build.classes}"/>
			    </path>
		    </target>
		    
		    
		    <!-- generate-sources -->
		    
		    <target name="generate-sources" depends="validate" description="generate any source code for inclusion in compilation">
		    </target>
		    
		    
		    <!-- process-sources -->
		    
		    <target name="process-sources" depends="generate-sources" description="process the source code, for example to filter any values">
		    </target>
		    
		    
		    <!-- generate-resources -->
		    
		    <target name="generate-resources" depends="process-sources" description="generate resources for inclusion in the package">
		    </target>
		    
		    
		    <!-- compile -->
		    
		    <target name="compile" depends="dependencies,generate-resources" description="compile the source code of the project">
			    <javac compiler="${options.javac.compiler}"
				   srcdir="${project.build.src.main.java}" 
				   excludes="${options.javac.excludes.main}"
				   destdir="${project.build.classes}" 
				   source="${project.compile.jdk}" target="${project.compile.jdk}" 
				   fork="${project.compile.fork}" memoryinitialsize="${project.compile.meminitial}" 
				   memorymaximumsize="${project.compile.maxmem}" 
				   debug="${project.compile.debug}" 
				   verbose="${project.compile.verbose}" 
				   classpathref="classes.path.id">
				    <compilerarg value="${project.compile.lint}" />
			    </javac>
		    </target>
		    
		    
		    <!-- process-classes -->
		    
		    <target name="process-classes" depends="compile" description="post-process the generated files from compilation, for example to do bytecode enhancement on Java classes"/>
		    
		    
		    <!-- generate-test-sources -->
		    
		    <target name="generate-test-sources" depends="process-classes" if="reactor.compile.testcases" description="create resources for testing">
		    </target>
		    
		    
		    <!-- process-test-resources -->
		    
		    <target name="process-test-resources" depends="generate-test-sources" if="reactor.compile.testcases" description="copy and process the resources into the test destination directory">
		    </target>
		    
		    
		    <!-- test-compile -->
		    
		    <target name="test-compile" depends="process-test-resources" if="reactor.compile.testcases" description="compile the test source code into the test destination directory">
			<javac compiler="${options.javac.compiler}"
			       srcdir="${project.build.src.test.java}" 
			       excludes="${options.javac.excludes.test}"
			       destdir="${project.build.classes}" 
			       source="${project.compile.jdk}" target="${project.compile.jdk}" 
			       fork="${project.compile.fork}" memoryinitialsize="${project.compile.meminitial}" 
			       memorymaximumsize="${project.compile.maxmem}" 
			       debug="${project.compile.debug}" 
			       verbose="${project.compile.verbose}" 
			       classpathref="classes.path.id">
				<compilerarg value="${project.compile.lint}" />
			</javac>
			</target>
			
			
			<!-- process-test-classes -->
			
			<target name="process-test-classes" depends="test-compile" if="reactor.test.testcases" description="post-process the generated files from test compilation, for example to do bytecode enhancement on Java classes">
			</target>
			
			
			<!-- test -->
			
			<target name="test" depends="process-test-classes" if="reactor.test.testcases" description="run tests using a suitable unit testing framework. These tests should not require the code be packaged or deployed">
				<junit printsummary="yes" showoutput="yes" haltonfailure="no" fork="yes" dir="${project.build.classes}">
					<classpath>
						<path refid="classes.path.id" />
					</classpath>
					<formatter type="xml" />
				</junit>
			</target>
			
			
			<!-- prepare-package -->
			
			<target name="_prepare-package-manifest">
				<mkdir dir="${project.build.work}/META-INF"/>
				<delete file="${param.manifest}" />
				<manifest file="${param.manifest}">
					<!-- Some standard information -->
					<attribute name="Manifest-Version"       value="1.0" />
					<attribute name="Created-By"             value="${ant.version}" />
					<attribute name="Built-By"               value="${user.name}" />
					<attribute name="Build-Jdk"              value="${java.version}" />
					<attribute name="Main-Class"             value="${param.class}" />
					<!-- Application information -->
					<attribute name="Specification-Title"    value="${project.spec.title}" />
					<attribute name="Specification-Vendor"   value="${project.spec.vendor}" />
					<attribute name="Specification-Version"  value="${project.spec.version}" />
					<attribute name="Implementation-Vendor"  value="${project.impl.vendor}" />
					<attribute name="Implementation-Title"   value="${project.impl.title}" />
					<attribute name="Implementation-Version" value="${project.impl.version}" />
					<attribute name="Implementation-Build"   value="${buildNumber}" />
					<attribute name="App-Realm"              value="${profile.app.realm}" />
					<attribute name="App-Mode"               value="${profile.app.mode}" />
					<attribute name="App-URL"                value="${project.url}" />
				</manifest>
			</target>
			
			<target name="prepare-package" depends="test" description="perform any operations necessary to prepare a package before the actual packaging. This often results in an unpacked, processed version of the package">
				<!-- ===== Defining filesets ===== -->		
				<property name="work"     value="${project.build.work}"/>
				<property name="jar"      value="${project.build.target}/${project.installation.base}.jar"/>
				<property name="ubberjar" value="${project.build.target}/${project.installation.base}-ubber.jar"/>
				<fileset casesensitive="true" id="fileset.classes" dir="${project.build.classes}" />
				<fileset casesensitive="true" id="fileset.resources" dir="${project.build.src.main.res}" />
				<fileset casesensitive="true" id="fileset.libs" dir="${project.build.lib}" />
				<fileset casesensitive="true" id="fileset.config" dir="${work}"/>
			</target>
			
			
			
			<!-- package -->
			
			<target name="_package-appender">
				<echo message="${param.classifier} :: appending ${param.file} to ${param.jar}"/>
				<jar casesensitive="true" update="${param.update}" index="${param.index}" filesetmanifest="${param.filesetmanifest}" destfile="${param.jar}">
					<zipfileset casesensitive="true" src="${param.file}">
						<exclude name="META-INF/MANIFEST.MF"/>
						<exclude name="META-INF/INDEX.LIST"/>
						<exclude name="META-INF/*.DSA"/>
						<exclude name="META-INF/*.RSA"/>
						<exclude name="META-INF/*.SF"/>
					</zipfileset>
				</jar>
			</target>
			

			<target name="_package-proguard-runner">
				<delete file="param.in.jar"/>
				<delete file="param.out.jar"/>
				<delete file="param.map"/>
				<delete file="param.seeds"/>
				<delete file="param.conf"/>
				<java fork="true" failonerror="true" maxmemory="${options.proguard.maxmemory}" jar="${proguard.jar.file}" >
					<arg value="@${param.conf}"/>
					<arg value="-injars  ${param.in.jar}"/>
					<arg value="-outjars ${param.out.jar}"/>
					<arg value="-printmapping ${param.map}"/>
					<arg value="-printseeds   ${param.seeds}"/>
					<arg value="${param.options}"/>
				</java>
			</target>
			
			<target name="package" depends="prepare-package" description="take the compiled code and package it in its distributable format, such as a JAR">

				<!-- generating .jar file -->
				<antcall target="_prepare-package-manifest">
					<param name="param.manifest" value="${project.build.work}/META-INF/MANIFEST.MF"/>
					<param name="param.class"    value="${profile.dummy.class}"/>
				</antcall>
				<delete file="${jar}" />
				<jar casesensitive="true" update="false" index="true" filesetmanifest="merge" destfile="${jar}">
					<!-- manifest="${manifest}" -->
					<fileset refid="fileset.classes"/>
					<fileset refid="fileset.config"/>
					<fileset refid="fileset.resources"/>
				</jar>
				
				<!-- generating ubber .jar file -->
				<antcall target="_prepare-package-manifest">
					<param name="param.manifest" value="${project.build.work}/META-INF/MANIFEST.MF"/>
					<param name="param.class"    value="${profile.samples.class}"/>
				</antcall>
				<delete file="${ubberjar}" />
				<jar casesensitive="true" update="false" index="true" filesetmanifest="merge" destfile="${ubberjar}">
					<!-- manifest="${manifest}" -->
					<fileset refid="fileset.classes"/>
					<fileset refid="fileset.config"/>
					<fileset refid="fileset.resources"/>
				</jar>
				<antcontrib:for param="file">
					<fileset refid="fileset.libs"/>
					<sequential>
						<antcall target="_package-appender">
							<param name="param.classifier"		value="ubber" />
							<param name="param.jar"				value="${ubberjar}" />
							<param name="param.file"			value="@{file}" />
							<param name="param.update"			value="true" />	
							<param name="param.index"			value="true" />	
							<param name="param.filesetmanifest"	value="skip" />
						</antcall>
					</sequential>
				</antcontrib:for>
			</target>
			
			
			<!-- pre-integration-test -->
			
			<target name="pre-integration-test" depends="package" description="perform actions required before integration tests are executed. This may involve things such as setting up the required environment">
			</target>
			
			
			<!-- integration-test -->
			
			<target name="_integration-test-runjar">
				<java fork="true" failonerror="true" maxmemory="${param.memory}" jar="${param.jar}" >
					<arg line="${param.args}"/>
				</java>
			</target>
			
			<target name="_integration-test-runclass">
				<java fork="true" failonerror="true" maxmemory="${param.memory}" classname="${param.classname}" >
					<classpath>
						<pathelement path="${param.path}"/>
					</classpath>
					<arg line="${param.args}"/>
				</java>
			</target>
			
			
			
			<target name="integration-test" depends="pre-integration-test" description="process and deploy the package if necessary into an environment where integration tests can be run">
				<parallel>
					<!-- run server side -->
					<echo>Running server side on ${os.name}</echo>
					<exec executable="${server.work}/runserver.bat" spawn="true" os="Windows XP"/>
					<exec executable="${server.work}/runserver.sh"  spawn="true" os="Linux"/>
					
					<!-- run client side -->
					<echo>Running client side on ${os.name}</echo>
					<java fork="true" failonerror="true" maxmemory="${project.assembly.manifest.classMemory}" jar="${ubberjar}" />
				</parallel>
			</target>
			
			
			<!-- post-integration-test -->
			
			<target name="post-integration-test" depends="integration-test" description="perform actions required after integration tests have been executed. This may including cleaning up the environment">
			</target>
			
			
			<!-- verify -->
			
			<target name="verify" depends="package" description="run any checks to verify the package is valid and meets quality criteria">
				<!--
				<echo>Shrinking and obfuscating ( This will take a while... )</echo>
				<antcall target="_package-proguard-runner">
					<param name="param.in.jar"		value="${ubberjar}" />
					<param name="param.out.jar"		value="${project.build.target}/${project.installation.base}-ubber-obf.jar" />
					<param name="param.map"			value="${project.build.target}/${project.installation.base}-ubber-map.txt" />	
					<param name="param.seeds"		value="${project.build.target}/${project.installation.base}-ubber-seeds.txt" />	
					<param name="param.conf"		value="${project.build.proguard.conf}/" />
					<param name="param.options"		value="-verbose" />
				</antcall>
				-->
			</target>
			
			
			<!-- install -->
			
			<target name="install" depends="verify" description="install the package into the local repository, for use as a dependency in other projects locally">
				<mkdir dir="${project.installation.home}" />
				<copy todir="${project.installation.home}">
					<fileset casesensitive="true" dir="target">
						<include name="*.jar" />
						<!-- include name="*.txt" / -->
					</fileset>
				</copy>
			</target>
			
			
			<!-- deploy -->
			
			<target name="deploy" depends="install" description="done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects">
			</target>
			
			
			<!-- site -->
			
			<target name="_site-javadocs">
				<javadoc maxmemory="${options.javadoc.maxmemory}" defaultexcludes="yes" author="true" version="true" use="true"
					 destdir="${param.api}"
					 windowtitle="${param.title}">
					<packageset dir="${param.src}" defaultexcludes="yes"/>
				</javadoc>
			</target>
			
			<target name="_site-findbugs">
				<!--
				findbugs home="${findbugs.home}"
						     output="xml"
						     outputFile="bcel-fb.xml" >
					<auxClasspath path="${basedir}/lib/Regex.jar" />
					<sourcePath path="${basedir}/src/java" />
					<class location="${basedir}/bin/bcel.jar" />
				</findbugs
				-->
			</target>
			
			<target name="site" depends="compile" description="generates documentation">
				<antcall target="_site-javadocs">
					<param name="param.title"			value="${project.name}" />
					<param name="param.src"				value="${project.build.src.main.java}" />
					<param name="param.api"				value="${project.build.javadocs}" />
				</antcall>
			</target>
		
	</project>
