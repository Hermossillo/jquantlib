Overview

  LaTeXtaglet allows inclusion of mathematical equations in Javadocs. Let's explain by example:
  
  In order to add an inline greek symbol <delta> in a Javadoc, use \{@latex$ ... \}, like this:

+-------------------------------+
  /**
   * Calculates {latex$ \Delta } (delta)
   */
+-------------------------------+

  In order to add a complex equation which fits better as a separate block, use \{@latex\[ ... \}, like this:

+-------------------------------+
  /**
   * Cash-flow duration
   * <p>
   * The simple cash-flow duration of a string of cash flows is defined as
   * {@latex[ D_ \mathrm{simple} = \frac{\sum t_i c_i B(t_i)}{\sum c_i B(t_i)} }
   */
+-------------------------------+

  If you still don't know what these weird things are about, probably you need to visit
  {{{http://en.wikipedia.org/wiki/TeX}TeX in Wikipedia}}.


* How it works

  LatexTaglet is called as part of Javadoc generation process, being passed as parameter to javadoc tool.\
  It can also participate in more complex configurations, like a scenarios where there are doclets and other
  taglets contributing to generate fancy javadocs.
  
  You can configure your build process like {{{http://www.jquantlib.org/index.php/Integrate_LatexTaglet_into_a_Maven_build}here}}
  in order to make use of LatexTaglet. Once you've done it, you can generate Javadocs which contain mathematical equations
  like this:
  
+-------------------------------+
    mvn clean javadoc:javadoc
+-------------------------------+

  When LatexTaglet finds a equation in your Javadocs (in your .java sources), it will create a .tex file which needs to be
  rendered in order to produce an image, which will be referred then.
  
  Actually, LatexTaglet does not directly render images but delegates this work to an external shell script created by you.
  Having a chance to create this external shell script, you can customize the process to your needs.
      

* History

  This project was originally developed by Stephan Dlugosz and hosted at SourceForge.
  The original source code is dependent of Windows conventions for directories and files names.

  The modified version of LaTeXtaglet described here runs fine on Unix platforms but was never tested on Windows.
  It's uncertain whether changes in the modified version will be propagated back to the original code base as
  the original author apparently stopped improvements to the original code base.

  Hence, another code base was created under JQuantLib umbrella.
  JQuantLib uses LaTeXtaglet to generate nice Javadocs which contains UML diagrams and mathematical equations.
  